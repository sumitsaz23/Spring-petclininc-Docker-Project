name: "CI build with Maven & docker build"

on:
#  push:
#    branches:
#    - master
  workflow_dispatch:

jobs:
  
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4

      # The first call to the action will invoke setup-trivy and install trivy
      - name: Generate Trivy Vulnerability Report
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          output: trivy-report.json
          format: json
          scan-ref: .
          exit-code: 0
          skip-setup-trivy: true

      - name: Upload Vulnerability Scan Results
        uses: actions/upload-artifact@v4
        with:
          name: trivy-report
          path: trivy-report.json
          retention-days: 30

      # - name: Fail build on High/Criticial Vulnerabilities
      #   uses: aquasecurity/trivy-action@master
      #   with:
      #     scan-type: "fs"
      #     format: table
      #     scan-ref: .
      #     severity: HIGH,CRITICAL
      #     ignore-unfixed: true
      #     exit-code: 1
      #     # On a subsequent call to the action we know trivy is already installed so can skip this
      #     skip-setup-trivy: true
  
  
  
  
  Build:
    name: "build the jar"
    runs-on: self-hosted
    steps:
      - name: check out code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      # - name: "build with maven"
      #   run: mvn clean install -f pom.xml

      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        run: | 
          mvn clean install -f pom.xml
  #        mvn -B org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=spring-petclinic-docker-project -Dsonar.projectName='spring-petclinic-docker-project'
    
      - name: Upload a Build Artifact
        uses: actions/upload-artifact@v4.6.2
        with:
          name: java-app
          path: target/*.jar 


  Securitycheck:
    name: Sonarqube check
    runs-on: self-hosted
    needs: Build
    steps:   
      - name: SonarQube Scan
        uses: SonarSource/sonarqube-scan-action@v5.2.0 # Ex: v4.1.0, See the latest version at https://github.com/marketplace/actions/official-sonarqube-scan
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

  Check_Quality_Gate_status:
    name: quality gate
    runs-on: self-hosted
    needs: Securitycheck
    steps:
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
        with:
          pollingTimeoutSec: 600
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
  
  Docker_Build:
    name: Build Docker image
    runs-on: self-hosted
    needs: Build
    env:
      app_name: "springpetclinic"
    steps:
      
    - name: Build Docker image  
      run: docker build -t "${{env.app_name}}:${{ github.sha }}" .
      
    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ vars.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Trivy scan
      uses: aquasecurity/trivy-action@0.28.0
      with:
        image-ref: "${{env.app_name}}:${{ github.sha }}"
        format: 'table'
        
    - name: Push to Docker Hub
      run: |
        docker tag "${{env.app_name}}:${{ github.sha }}" "${{vars.DOCKERHUB_USERNAME}}/${{env.app_name}}":${{github.ref_name}}
        docker push "${{vars.DOCKERHUB_USERNAME}}/${{env.app_name}}":${{github.ref_name}}

  Deploy:
    name: Deploy app docker image
    runs-on: self-hosted
    needs: Docker_Build
    env:
      REMOTE_SERVER: "3.108.238.222"
      REMOTE_USER: ubuntu
      IMAGE: "sumitsur74/springpetclinic:${{github.ref_name}}"
      CONTAINER: "springpet-app"
      PATH: /home/ubuntu

    steps:
    - name: "SSH key"
      run: |
        echo "/usr/bin" >> $GITHUB_PATH
        echo "${{ secrets.REMOTE_SSH_KEY }}" > key.pem
        /usr/bin/chmod 400 key.pem

    # - name: "SSH & start docker container"
    #   run: |
    #     /usr/bin/ssh -i "key.pem" ${{env.REMOTE_USER}}@${{env.REMOTE_SERVER}}
    #     docker pull ${{env.IMAGE}}
    #     echo "Stopping existing container: ${{env.CONTAINER}}"
    #     docker stop "${{env.CONTAINER}}" || true && docker rm "${{env.CONTAINER}}" || true
    #     docker run -d --name=${{env.CONTAINER}} ${{env.IMAGE}} -p 9000:9000

    #     echo "Removing existing container: ${{env.CONTAINER}}"
    #     pkill -f "docker logs -f ${{env.CONTAINER}}" || true
    #     nohup bash -c "docker logs -f ${{env.CONTAINER}} >> ${{env.PATH}}/springpetapp.log  2>&1" </dev/null &


    - name: SSH & start docker container
      run: |
        ssh -i "key.pem" -o StrictHostKeyChecking=no ${{ env.REMOTE_USER }}@${{ env.REMOTE_SERVER }} bash << 'EOF'
          set -e
          docker pull "${{ env.IMAGE }}"
          echo "Stopping existing container: ${{ env.CONTAINER }}"
          docker stop "${{ env.CONTAINER}}" || true
          docker rm "${{ env.CONTAINER}}"   || true
          docker run -d \
            --name="${{ env.CONTAINER }}" \
            -p 8080:8080 \
            "${{ env.IMAGE }}"
          echo "Tailing logs to springpetapp.log"
          pkill -f "docker logs -f ${{ env.CONTAINER }}" || true
          nohup bash -c "docker logs -f ${{ env.CONTAINER }} >> ${{ env.PATH }}/springpetapp.log 2>&1" </dev/null &
          exit
        EOF
